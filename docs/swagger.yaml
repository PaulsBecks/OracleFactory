basePath: /
definitions:
  forms.AuthBody:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      body:
        type: string
    type: object
  responses.TokenResponse:
    properties:
      token:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the Subscription Factory server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Subscription Factory API
  version: "2.0"
paths:
  /inboundSubscriptions:
    get:
      description: Retrieve all inbound subscriptions of a user. This will be called
        from the frontend, when a user wants to view a list of subscription.
      produces:
      - application/json
      responses: {}
      summary: Retrieves all inbound subscription of a user
      tags:
      - inboundSubscriptions
    post:
      description: Creates an inbound subscription for a user. This service will be
        called by the frontend to when a user filled out the inbound subscription
        form.
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Creates an inbound subscription for a user
      tags:
      - inboundSubscriptions
  /inboundSubscriptions/{inboundSubscriptionID}:
    get:
      description: Retrieve the specified inbound subscription. This will be called
        from the frontend, when a user wants to view an subscription.
      parameters:
      - description: the ID of the inbound subscription you want to retrieve.
        in: path
        name: inboundSubscriptionID
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Retrieve an inbound subscription
      tags:
      - inboundSubscriptions
    put:
      description: Update the specified inbound subscription. This will be called
        from the frontend, when a user wants to update an subscription.
      parameters:
      - description: the ID of the inbound subscription you want to update.
        in: path
        name: inboundSubscriptionID
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Update an inbound subscription
      tags:
      - inboundSubscriptions
  /inboundSubscriptions/{inboundSubscriptionID}/start:
    post:
      description: Start the specified inbound subscription. This will be called from
        the frontend, when a user wants to use an subscription for a blockchain conenction.
      parameters:
      - description: the ID of the inbound subscription you want to start.
        in: path
        name: inboundSubscriptionID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Start an Outbound Subscription
      tags:
      - inboundSubscriptions
  /inboundSubscriptions/{inboundSubscriptionID}/stop:
    post:
      description: Stop the specified inbound subscription. This will be called from
        the frontend, when a user wants to stop an subscription for a blockchain conenction.
      parameters:
      - description: the ID of the inbound subscription you want to stop.
        in: path
        name: inboundSubscriptionID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Stop an inbound subscription
      tags:
      - inboundSubscriptions
  /outboundSubscriptions:
    get:
      description: Retrieve all outbound subscriptions of a user. This will be called
        from the frontend, when a user wants to view a list of subscription.
      produces:
      - application/json
      responses: {}
      summary: Retrieves all outbound subscription of a user
      tags:
      - outboundSubscriptions
    post:
      description: Creates an outbound subscription for a user. This service will
        be called by the frontend to when a user filled out the outbound subscription
        form.
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Creates an outbound subscription for a user
      tags:
      - outboundSubscriptions
  /outboundSubscriptions/{outboundSubscriptionID}:
    get:
      description: Retrieve the specified outbound subscription. This will be called
        from the frontend, when a user wants to view an subscription.
      parameters:
      - description: the ID of the outbound subscription you want to retrieve.
        in: path
        name: outboundSubscriptionID
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Retrieve an outbound subscription
      tags:
      - outboundSubscriptions
    put:
      description: Update the specified outbound subscription. This will be called
        from the frontend, when a user wants to update an subscription.
      parameters:
      - description: the ID of the outbound subscription you want to update.
        in: path
        name: outboundSubscriptionID
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Update an outbound subscription
      tags:
      - outboundSubscriptions
  /outboundSubscriptions/{outboundSubscriptionID}/start:
    post:
      description: Start the specified outbound subscription. This will be called
        from the frontend, when a user wants to use an subscription for a blockchain
        conenction.
      parameters:
      - description: the ID of the outbound subscription you want to start.
        in: path
        name: outboundSubscriptionID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Start an Outbound Subscription
      tags:
      - outboundSubscriptions
  /outboundSubscriptions/{outboundSubscriptionID}/stop:
    post:
      description: Stop the specified outbound subscription. This will be called from
        the frontend, when a user wants to stop an subscription for a blockchain conenction.
      parameters:
      - description: the ID of the outbound subscription you want to stop.
        in: path
        name: outboundSubscriptionID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Stop an outbound subscription
      tags:
      - outboundSubscriptions
  /smartContractConsumers:
    get:
      description: Retrieves all smart contract consumers for a user. This service
        will be called by the frontend to retrieve all smart contract consumers of
        the user signed in.
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Retrieves all smart contract consumers for a user
      tags:
      - smartContractConsumer
    post:
      description: Creates a smart contract consumers for a user. This service will
        be called by the frontend to when a user filled out the smart contract consumer
        form.
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Creates a smart contract consumers for a user
      tags:
      - smartContractConsumer
  /smartContractConsumers/{smartContractConsumerID}:
    get:
      description: Retrieves the smart contract consumer specified. This service will
        be called by the frontend to retrieve a specific consumers of the user signed
        in.
      parameters:
      - description: the ID of the smart contract consumer to send data to.
        in: path
        name: smartContractConsumerID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Retrieves a smart contract consumer for a user
      tags:
      - smartContractConsumer
  /smartContractProviders:
    get:
      description: Retrieves all smart contract provider of the user signed in. This
        endpoint will be called from the frontend, to display information about all
        smart contract providers of the user signed in.
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Retrieves all smart contract provider of the user signed in.
      tags:
      - smartContractProvider
    post:
      description: Creates a smart contract providers for a user. This service will
        be called by the frontend to when a user filled out the smart contract provider
        form.
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Creates a smart contract providers for a user
      tags:
      - smartContractProvider
  /smartContractProviders/{smartContractProviderID}:
    get:
      description: Retrieves a smart contract provider. This endpoint will be called
        from the frontend, to display information about a smart contract provider.
      parameters:
      - description: the ID of the smart contract provider to send data to.
        in: path
        name: smartContractProviderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Retrieves a smart contract provider
      tags:
      - smartContractProvider
  /smartContractProviders/{smartContractProviderID}/events:
    post:
      description: Handles the event send from a smart contract provider. This endpoint
        will be called from the BLF, that provides data to the artifact.
      parameters:
      - description: the ID of the smart contract provider to send data to.
        in: path
        name: smartContractProviderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Handles the event send from a smart contract provider
      tags:
      - smartContractProvider
  /user:
    get:
      consumes:
      - application/json
      description: Retrieve the signed in user. This will be called by the frontend
        to get all information about the user signed in.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Retrieve signed in user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user. This will be called from the frontend to update
        the settings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update User
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login a user - get access token.
      parameters:
      - description: auth to register
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/forms.AuthBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Login User
      tags:
      - users
  /users/signup:
    post:
      consumes:
      - application/json
      description: Register a new user - get access token in return.
      parameters:
      - description: auth to register
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/forms.AuthBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Register User
      tags:
      - users
  /webServiceConsumers:
    get:
      description: Retrieves all web service consumers for a user. This service will
        be called by the frontend to retrieve all web service consumers of the user
        signed in.
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Retrieves all web service consumers for a user
      tags:
      - webServiceConsumer
    post:
      description: Creates a web service consumers for a user. This service will be
        called by the frontend to when a user filled out the web service consumer
        form.
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Creates a web service consumers for a user
      tags:
      - webServiceConsumer
  /webServiceConsumers/{webServiceConsumerID}:
    get:
      description: Retrieves the web service consumer specified. This service will
        be called by the frontend to retrieve a specific consumers of the user signed
        in.
      parameters:
      - description: the ID of the web service consumer to send data to.
        in: path
        name: webServiceConsumerID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Retrieves a web service consumer for a user
      tags:
      - webServiceConsumer
  /webServiceProviders:
    get:
      description: Retrieves all web service providers for a user. This service will
        be called by the frontend to retrieve all web service providers of the user
        signed in.
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Retrieves all web service providers for a user
      tags:
      - webServiceProvider
    post:
      description: Creates a web service providers for a user. This service will be
        called by the frontend to when a user filled out the web service provider
        form.
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Creates a web service providers for a user
      tags:
      - webServiceProvider
  /webServiceProviders/{webServiceProviderID}:
    get:
      description: Retrieves the web service provider specified. This service will
        be called by the frontend to retrieve a specific providers of the user signed
        in.
      parameters:
      - description: the ID of the web service provider to send data to.
        in: path
        name: webServiceProviderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Retrieves a web service provider for a user
      tags:
      - webServiceProvider
  /webServiceProviders/{webServiceProviderID}/events:
    post:
      description: Handles the event send from a web service provider. This endpoint
        will be called from an external service, that provides data to the artifact.
      parameters:
      - description: the ID of the web service provider to send data to.
        in: path
        name: webServiceProviderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Handles the event send from a web service provider
      tags:
      - webServiceProvider
swagger: "2.0"
